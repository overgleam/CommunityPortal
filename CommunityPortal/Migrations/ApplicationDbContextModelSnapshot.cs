// <auto-generated />
using System;
using CommunityPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CommunityPortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommunityPortal.Models.Administrator", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CommunityPortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "74006c8e-6504-4045-882a-7f03fd12da2b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7882f583-79dc-4ba4-b5bc-c92a1bbeaa2c",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4564),
                            Email = "aiah@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AIAH@GMAIL.COM",
                            NormalizedUserName = "AIAHSTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEA8tvQW3vFHBCJQsm0MxKhXCL4U7DSVUmxOzXbl/aqUQvy2irF+QCiDmzEgfisGptQ==",
                            PhoneNumber = "09772719114",
                            PhoneNumberConfirmed = true,
                            ProfileImagePath = "images/default/Aiah.png",
                            SecurityStamp = "93218cf7-a15c-45d1-9629-be4848fbcb3e",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4565),
                            UserName = "aiahstaff"
                        },
                        new
                        {
                            Id = "873c791b-5f95-476b-a8e8-59f235b1ed7b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "427b8f68-6e27-490b-959b-c437f9d0eb07",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4570),
                            Email = "david@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID@GMAIL.COM",
                            NormalizedUserName = "DAVIDSTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEMkXRK2kLjqTas6Nt7ygKSNmr9ilLDyNPim6urVqpfuPnfgBH+3QU8KVgw/m2nL6uQ==",
                            PhoneNumber = "09772719114",
                            PhoneNumberConfirmed = true,
                            ProfileImagePath = "images/default/David.png",
                            SecurityStamp = "1b94574b-55ff-4e31-9480-f43961a9cae2",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4570),
                            UserName = "davidstaff"
                        },
                        new
                        {
                            Id = "8ab8f4c9-e464-428c-9b00-602f40383309",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b83179d6-9952-4506-91bc-5042999bf057",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4630),
                            Email = "marinella@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARINELLA@GMAIL.COM",
                            NormalizedUserName = "MARINELLASTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEOJ/LkoBweL/oHYGBpupnDHd+AQHstOenJE9GTOwUSIFcuyZCkbcbyIRGGWEFHvVfg==",
                            PhoneNumber = "09772719114",
                            PhoneNumberConfirmed = true,
                            ProfileImagePath = "images/default/Caber.png",
                            SecurityStamp = "986e3937-9558-4b29-9652-bc91692ae94e",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4630),
                            UserName = "marinellastaff"
                        },
                        new
                        {
                            Id = "fb72ce13-022a-428e-b18a-2ff30216d03f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d20b486-2708-4958-93b0-26e084c48c0c",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4635),
                            Email = "kevin@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KEVIN@GMAIL.COM",
                            NormalizedUserName = "KEVINSTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEMxDWn8Cvb1PbFtOslIp2PaD1Caw+ewn2u9dnQX0TQ+4tvT0ZdFe7u2u3OXnXCj+aA==",
                            PhoneNumber = "09772719114",
                            PhoneNumberConfirmed = true,
                            ProfileImagePath = "images/default/Tamayo.png",
                            SecurityStamp = "ddae3b0a-32e1-4e6f-8faa-2396e8c8b7d6",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4635),
                            UserName = "kevinstaff"
                        },
                        new
                        {
                            Id = "c90b54c0-0849-4b66-a27e-68390b98ed3d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed38af67-f4bf-4dfd-802e-f38983dcd1cb",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4640),
                            Email = "slater@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SLATER@GMAIL.COM",
                            NormalizedUserName = "SLATERSTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEB1VrfiP/5PyWhGMnZOSn7M944j3mN5HhO9TYi4pl0fcnPpKAAQKqZlMmrkGpXEKgg==",
                            PhoneNumber = "09772719114",
                            PhoneNumberConfirmed = true,
                            ProfileImagePath = "images/default/Slater.png",
                            SecurityStamp = "5d557cc2-3176-42d4-9bac-10825e696ee7",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4641),
                            UserName = "slaterstaff"
                        },
                        new
                        {
                            Id = "ec1f1410-3372-4479-9da4-6d9d7153a8e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c16b5619-d9df-4b7e-a245-9fbfeffbb5a3",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4644),
                            Email = "crist@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CRIST@GMAIL.COM",
                            NormalizedUserName = "CRISTSTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEMnHfsoMLIrbLqolCqF+h2nQWu+A6jyxqjPtoLMkClgJvVY0AuhYs9nbv69UEDuiRw==",
                            PhoneNumber = "09772719114",
                            PhoneNumberConfirmed = true,
                            ProfileImagePath = "images/default/Brader.png",
                            SecurityStamp = "fdb851d6-f266-489d-b8dc-a8983b90a697",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4644),
                            UserName = "criststaff"
                        },
                        new
                        {
                            Id = "48d80ee5-482b-4c8c-9303-fbdcbd2cb9c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a142c78d-0216-43d8-adf2-5fd2ef58aa69",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4649),
                            Email = "al@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AL@GMAIL.COM",
                            NormalizedUserName = "ALSTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEORzI36aNYP9IbYjbnR+WzSODnOUttZegcZ42UXOo/RxGRC4R1dpN5pjHCSHLNQsUg==",
                            PhoneNumber = "09772719114",
                            PhoneNumberConfirmed = true,
                            ProfileImagePath = "images/default/Roblox.png",
                            SecurityStamp = "776d1cfe-0fc5-4c98-8a71-07cae8c20046",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4650),
                            UserName = "alstaff"
                        },
                        new
                        {
                            Id = "e5182b06-d283-4e6e-932b-d840ca84d938",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e5a1949-c7b0-4147-9297-edf61db0b408",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4725),
                            Email = "rowell@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ROWELL@GMAIL.COM",
                            NormalizedUserName = "ROWELLSTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEHu3P2Bs2E6xTo78leUNqEg0ievHX4f/rdze5sTRnweLmmRa/1eANzlSlZRtyir99A==",
                            PhoneNumber = "09772719114",
                            PhoneNumberConfirmed = true,
                            ProfileImagePath = "images/default/Rowell.png",
                            SecurityStamp = "f0128874-45c6-480e-876a-e3ded1125936",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4726),
                            UserName = "rowellstaff"
                        },
                        new
                        {
                            Id = "2ff57d7e-eff3-4ad5-8612-d39d64631296",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06594d14-9bd8-425c-8681-6b945fc7e750",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4731),
                            Email = "hev@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HEV@GMAIL.COM",
                            NormalizedUserName = "HEVSTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEBVcFDzh5IXSg6tvxY3EslquI7kl4J/HVCP3OF/ln1pg757ZaqfoObuAupOgUDFb0w==",
                            PhoneNumber = "09772719114",
                            PhoneNumberConfirmed = true,
                            ProfileImagePath = "images/default/Hev.png",
                            SecurityStamp = "144544c0-06e5-4084-80d7-5d940eb589b3",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4732),
                            UserName = "hevstaff"
                        },
                        new
                        {
                            Id = "cf02aaac-f73d-48fe-971c-fae141a1c438",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "305dea07-96ec-4bb9-a4b5-c9ad6a346cb0",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4735),
                            Email = "denise@gmail.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DENISE@GMAIL.COM",
                            NormalizedUserName = "DENISESTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEIAs+k08m83Ya2I6K6cK2tJVNCxVOmM4yGyr5Xq0T3Oz4eVG70ZmJ69VCh7sSA/BwQ==",
                            PhoneNumber = "09772719114",
                            PhoneNumberConfirmed = true,
                            ProfileImagePath = "images/default/Denise.png",
                            SecurityStamp = "b5009708-0916-4795-8108-1ed513067f76",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4735),
                            UserName = "denisestaff"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Billing.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeownerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPenaltyApplied")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PenaltyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HomeownerId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("CommunityPortal.Models.Billing.BillItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FeeTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("FeeTypeId");

                    b.ToTable("BillItems");
                });

            modelBuilder.Entity("CommunityPortal.Models.Billing.BillingSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingCycleDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LateFeeDays")
                        .HasColumnType("int");

                    b.Property<decimal>("LateFeePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PaymentDueDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BillingSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingCycleDay = 1,
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4440),
                            CreatedBy = "system",
                            Description = "Default configuration for billing operations",
                            IsActive = true,
                            LateFeeDays = 30,
                            LateFeePercentage = 5.00m,
                            Name = "Default Billing Settings",
                            PaymentDueDays = 15
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Billing.FeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DefaultAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FeeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Association Dues",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4380),
                            DefaultAmount = 2000.00m,
                            Description = "Monthly homeowner association dues",
                            IsActive = true,
                            IsRecurring = true,
                            IsRequired = true,
                            Name = "Association Dues"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Security and Maintenance",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4392),
                            DefaultAmount = 1000.00m,
                            Description = "Fees for security personnel and maintenance of common areas",
                            IsActive = true,
                            IsRecurring = true,
                            IsRequired = true,
                            Name = "Security and Maintenance"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Emergency Fund",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4394),
                            DefaultAmount = 200.00m,
                            Description = "Contribution to emergency fund for unforeseen community needs",
                            IsActive = true,
                            IsRecurring = true,
                            IsRequired = true,
                            Name = "Emergency Fund"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Facility Upkeep",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4395),
                            DefaultAmount = 500.00m,
                            Description = "Maintenance and upkeep of community facilities",
                            IsActive = true,
                            IsRecurring = true,
                            IsRequired = true,
                            Name = "Facility Upkeep"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Administrative",
                            CreatedAt = new DateTime(2025, 3, 1, 10, 13, 22, 610, DateTimeKind.Utc).AddTicks(4396),
                            DefaultAmount = 300.00m,
                            Description = "Expenses related to administrative functions",
                            IsActive = true,
                            IsRecurring = true,
                            IsRequired = true,
                            Name = "Administrative Expenses"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Billing.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeownerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentProofFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CommunityPortal.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("CommunityPortal.Models.Documents.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("DeletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSizeInKB")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UploadedById");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CommunityPortal.Models.Event.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHighPriority")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("MaxAttendees")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("RequiresRegistration")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CommunityPortal.Models.Facility.BlackoutDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("BlackoutDates");
                });

            modelBuilder.Entity("CommunityPortal.Models.Facility.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ClosingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumOccupancy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OpeningTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("CommunityPortal.Models.Facility.FacilityReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompletionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int>("GuestCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentVerificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentVerificationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentVerifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiptFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceiptUploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecialRequests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PaymentVerifiedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("FacilityReservations");
                });

            modelBuilder.Entity("CommunityPortal.Models.Facility.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QRCodeFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("CommunityPortal.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum.ForumComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("ForumComments");
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum.ForumLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumLikes");
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("CommunityPortal.Models.Homeowner", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlockNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MoveInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeOfResidency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Homeowners");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TargetAudience")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.PollQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxRating")
                        .HasColumnType("int");

                    b.Property<int?>("MinRating")
                        .HasColumnType("int");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollQuestions");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.PollQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BoolAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingAnswer")
                        .HasColumnType("int");

                    b.Property<int>("ResponseId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<string>("TextAnswer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("PollQuestionAnswers");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.PollQuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("PollQuestionOptions");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.PollResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("RespondentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("RespondentId");

                    b.ToTable("PollResponses");
                });

            modelBuilder.Entity("CommunityPortal.Models.ServiceRequest.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Power outages, malfunctioning streetlights, faulty wiring, outlets, circuit breakers, and installation of additional outdoor lighting",
                            IsDeleted = false,
                            Name = "Electrical Issues"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Low or no water pressure, leaking pipes, faucets, toilets, clogged drainage, sewage backups, and water supply interruptions",
                            IsDeleted = false,
                            Name = "Plumbing & Water Supply Issues"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cracks in walls, sidewalks, or roads, broken gates, fences, perimeter walls, roof leaks, damaged ceilings, and pest infestation",
                            IsDeleted = false,
                            Name = "Structural & Property Repairs"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Missed garbage collection, request for additional trash bins, flooding or stagnant water after heavy rains, and cleaning of community spaces",
                            IsDeleted = false,
                            Name = "Waste Management & Cleaning"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.ServiceRequest.ServiceFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeownerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("ServiceRequestId")
                        .IsUnique();

                    b.ToTable("ServiceFeedbacks");
                });

            modelBuilder.Entity("CommunityPortal.Models.ServiceRequest.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HomeownerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PreferredSchedule")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("CommunityPortal.Models.ServiceRequest.ServiceStaffAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnavailable")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex("StaffId");

                    b.ToTable("ServiceStaffAssignments");
                });

            modelBuilder.Entity("CommunityPortal.Models.Staff", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            UserId = "74006c8e-6504-4045-882a-7f03fd12da2b",
                            Address = "123 Main St, Cityville",
                            Department = "Maintenance Department",
                            FirstName = "Aiah",
                            LastName = "Arceta",
                            Position = "General Maintenance Worker"
                        },
                        new
                        {
                            UserId = "873c791b-5f95-476b-a8e8-59f235b1ed7b",
                            Address = "456 Elm St, Townsville",
                            Department = "Maintenance Department",
                            FirstName = "David",
                            LastName = "Guison",
                            Position = "Plumber"
                        },
                        new
                        {
                            UserId = "8ab8f4c9-e464-428c-9b00-602f40383309",
                            Address = "789 Oak St, Villageton",
                            Department = "Maintenance Department",
                            FirstName = "Marinella",
                            LastName = "Caber",
                            Position = "Electrician"
                        },
                        new
                        {
                            UserId = "fb72ce13-022a-428e-b18a-2ff30216d03f",
                            Address = "101 Pine St, Metrocity",
                            Department = "Maintenance Department",
                            FirstName = "Kevin",
                            LastName = "Tamayo",
                            Position = "HVAC Technician"
                        },
                        new
                        {
                            UserId = "c90b54c0-0849-4b66-a27e-68390b98ed3d",
                            Address = "202 Birch St, Suburbia",
                            Department = "Maintenance Department",
                            FirstName = "Slater",
                            LastName = "Young",
                            Position = "Carpenter"
                        },
                        new
                        {
                            UserId = "ec1f1410-3372-4479-9da4-6d9d7153a8e9",
                            Address = "303 Cedar St, Uptown",
                            Department = "Security Department",
                            FirstName = "Crist",
                            LastName = "Briand",
                            Position = "Security Guard"
                        },
                        new
                        {
                            UserId = "48d80ee5-482b-4c8c-9303-fbdcbd2cb9c3",
                            Address = "404 Redwood St, Downtown",
                            Department = "Security Department",
                            FirstName = "Al",
                            LastName = "Moralde",
                            Position = "Access Control Officer"
                        },
                        new
                        {
                            UserId = "e5182b06-d283-4e6e-932b-d840ca84d938",
                            Address = "505 Maple St, Citytown",
                            Department = "Housekeeping & Sanitation Department",
                            FirstName = "Rowell",
                            LastName = "Divina",
                            Position = "Janitor/Cleaner"
                        },
                        new
                        {
                            UserId = "2ff57d7e-eff3-4ad5-8612-d39d64631296",
                            Address = "606 Spruce St, Countryville",
                            Department = "Housekeeping & Sanitation Department",
                            FirstName = "Hev",
                            LastName = "Abi",
                            Position = "Waste Management Staff"
                        },
                        new
                        {
                            UserId = "cf02aaac-f73d-48fe-971c-fae141a1c438",
                            Address = "707 Willow St, Riverside",
                            Department = "Landscaping & Gardening Department",
                            FirstName = "Denise",
                            LastName = "Julia",
                            Position = "Gardener"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CommunityPortal.Models.Administrator", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithOne("Administrator")
                        .HasForeignKey("CommunityPortal.Models.Administrator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommunityPortal.Models.Billing.Bill", b =>
                {
                    b.HasOne("CommunityPortal.Models.Homeowner", "Homeowner")
                        .WithMany()
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Homeowner");
                });

            modelBuilder.Entity("CommunityPortal.Models.Billing.BillItem", b =>
                {
                    b.HasOne("CommunityPortal.Models.Billing.Bill", "Bill")
                        .WithMany("BillItems")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Billing.FeeType", "FeeType")
                        .WithMany("BillItems")
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("FeeType");
                });

            modelBuilder.Entity("CommunityPortal.Models.Billing.Payment", b =>
                {
                    b.HasOne("CommunityPortal.Models.Billing.Bill", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Homeowner", "Homeowner")
                        .WithMany()
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Facility.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Homeowner");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("CommunityPortal.Models.ChatMessage", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CommunityPortal.Models.Documents.Document", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeletedBy");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("CommunityPortal.Models.Event.Event", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CommunityPortal.Models.Facility.BlackoutDate", b =>
                {
                    b.HasOne("CommunityPortal.Models.Facility.Facility", "Facility")
                        .WithMany("BlackoutDates")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("CommunityPortal.Models.Facility.FacilityReservation", b =>
                {
                    b.HasOne("CommunityPortal.Models.Facility.Facility", "Facility")
                        .WithMany("Reservations")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "PaymentVerifiedBy")
                        .WithMany()
                        .HasForeignKey("PaymentVerifiedByUserId");

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Facility");

                    b.Navigation("PaymentVerifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommunityPortal.Models.Feedback", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum.ForumComment", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Forum.ForumComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommunityPortal.Models.Forum.ForumPost", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum.ForumLike", b =>
                {
                    b.HasOne("CommunityPortal.Models.Forum.ForumComment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommunityPortal.Models.Forum.ForumPost", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum.ForumPost", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CommunityPortal.Models.Homeowner", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithOne("Homeowner")
                        .HasForeignKey("CommunityPortal.Models.Homeowner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.Poll", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.PollQuestion", b =>
                {
                    b.HasOne("CommunityPortal.Models.Poll.Poll", "Poll")
                        .WithMany("Questions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.PollQuestionAnswer", b =>
                {
                    b.HasOne("CommunityPortal.Models.Poll.PollQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CommunityPortal.Models.Poll.PollResponse", "Response")
                        .WithMany("Answers")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CommunityPortal.Models.Poll.PollQuestionOption", "SelectedOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Question");

                    b.Navigation("Response");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.PollQuestionOption", b =>
                {
                    b.HasOne("CommunityPortal.Models.Poll.PollQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.PollResponse", b =>
                {
                    b.HasOne("CommunityPortal.Models.Poll.Poll", "Poll")
                        .WithMany("Responses")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Poll");

                    b.Navigation("Respondent");
                });

            modelBuilder.Entity("CommunityPortal.Models.ServiceRequest.ServiceFeedback", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Homeowner")
                        .WithMany()
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ServiceRequest.ServiceRequest", "ServiceRequest")
                        .WithOne("Feedback")
                        .HasForeignKey("CommunityPortal.Models.ServiceRequest.ServiceFeedback", "ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homeowner");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("CommunityPortal.Models.ServiceRequest.ServiceRequest", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Homeowner")
                        .WithMany()
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ServiceRequest.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Homeowner");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("CommunityPortal.Models.ServiceRequest.ServiceStaffAssignment", b =>
                {
                    b.HasOne("CommunityPortal.Models.ServiceRequest.ServiceRequest", "ServiceRequest")
                        .WithMany("StaffAssignments")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceRequest");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("CommunityPortal.Models.Staff", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithOne("Staff")
                        .HasForeignKey("CommunityPortal.Models.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.ApplicationUser", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Homeowner");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("CommunityPortal.Models.Billing.Bill", b =>
                {
                    b.Navigation("BillItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CommunityPortal.Models.Billing.FeeType", b =>
                {
                    b.Navigation("BillItems");
                });

            modelBuilder.Entity("CommunityPortal.Models.Facility.Facility", b =>
                {
                    b.Navigation("BlackoutDates");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum.ForumComment", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum.ForumPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.Poll", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.PollQuestion", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("CommunityPortal.Models.Poll.PollResponse", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("CommunityPortal.Models.ServiceRequest.ServiceCategory", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("CommunityPortal.Models.ServiceRequest.ServiceRequest", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("StaffAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
