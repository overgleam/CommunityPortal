@model CommunityPortal.Models.Poll.Poll

@{
    ViewData["Title"] = "Respond to Poll: " + Model.Title;
    Layout = "_HomeownersLayout";
}

<div class="container py-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Index">Polls & Surveys</a></li>
            <li class="breadcrumb-item"><a asp-action="Details" asp-route-id="@Model.Id">@Model.Title</a></li>
            <li class="breadcrumb-item active" aria-current="page">Respond</li>
        </ol>
    </nav>
    
    <div class="card shadow-sm mb-4">
        <div class="card-header">
            <h1 class="h3 mb-0">@Model.Title</h1>
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <div class="mb-4">
                    <p>@Model.Description</p>
                </div>
            }

            <form id="pollResponseForm" asp-action="SubmitResponse" method="post">
                <input type="hidden" name="pollId" value="@Model.Id" />
                
                @if (!Model.Questions.Any())
                {
                    <div class="alert alert-info">
                        <p>This poll does not have any questions yet.</p>
                    </div>
                }
                else
                {
                    <div class="alert alert-info mb-4">
                        <i class="fas fa-info-circle me-2"></i>
                        Questions marked with <span class="text-danger">*</span> are required.
                    </div>

                    <div class="list-group mb-4">
                        @foreach (var question in Model.Questions)
                        {
                            <div class="list-group-item">
                                <div class="d-flex align-items-center mb-3">
                                    <h5 class="mb-0">
                                        @question.QuestionText
                                        @if (question.IsRequired)
                                        {
                                            <span class="text-danger">*</span>
                                        }
                                    </h5>
                                </div>

                                @switch (question.QuestionType)
                                {
                                    case CommunityPortal.Models.Enums.QuestionType.MultipleChoice:
                                        <div class="mb-3">
                                            @foreach (var option in question.Options)
                                            {
                                                <div class="form-check mb-2">
                                                    <input class="form-check-input"
                                                           type="checkbox"
                                                           name="@(question.Id)[]"
                                                           value="@option.Id"
                                                           id="option-@option.Id">
                                                    <label class="form-check-label" for="option-@option.Id">
                                                        @option.OptionText
                                                    </label>
                                                </div>
                                            }
                                        </div>
                                        break;
                                    case CommunityPortal.Models.Enums.QuestionType.SingleChoice:
                                        <div class="mb-3">
                                            @foreach (var option in question.Options)
                                            {
                                                <div class="form-check mb-2">
                                                    <input class="form-check-input" type="radio" name="@question.Id" value="@option.Id" id="option-@option.Id" @(question.IsRequired ? "required" : "")>
                                                    <label class="form-check-label" for="option-@option.Id">
                                                        @option.OptionText
                                                    </label>
                                                </div>
                                            }
                                        </div>
                                        break;
                                    case CommunityPortal.Models.Enums.QuestionType.Rating:
                                        <div class="mb-3">
                                            <div class="d-flex">
                                                @for (int i = question.MinRating.Value; i <= question.MaxRating.Value; i++)
                                                {
                                                    <div class="me-3 text-center">
                                                        <input class="form-check-input" type="radio" name="@question.Id" value="@i" id="rating-@question.Id-@i" @(question.IsRequired ? "required" : "")>
                                                        <label class="d-block" for="rating-@question.Id-@i">@i</label>
                                                    </div>
                                                }
                                            </div>
                                            <div class="d-flex justify-content-between mt-1">
                                                <small class="text-muted">@question.MinRating (Lowest)</small>
                                                <small class="text-muted">@question.MaxRating (Highest)</small>
                                            </div>
                                        </div>
                                        break;
                                    case CommunityPortal.Models.Enums.QuestionType.OpenEnded:
                                        <div class="mb-3">
                                            <textarea class="form-control" name="@question.Id" rows="3" @(question.IsRequired ? "required" : "")></textarea>
                                        </div>
                                        break;
                                    case CommunityPortal.Models.Enums.QuestionType.YesNo:
                                        <div class="mb-3">
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="@question.Id" id="yes-@question.Id" value="true" @(question.IsRequired ? "required" : "")>
                                                <label class="form-check-label" for="yes-@question.Id">Yes</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="@question.Id" id="no-@question.Id" value="false" @(question.IsRequired ? "required" : "")>
                                                <label class="form-check-label" for="no-@question.Id">No</label>
                                            </div>
                                        </div>
                                        break;
                                }
                            </div>
                        }
                    </div>

                    <div class="alert alert-info">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Note: Once you submit your response, you will not be able to change it.
                    </div>
                }

                <div class="d-flex justify-content-between">
                    <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Back to Poll
                    </a>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-paper-plane me-2"></i>Submit Response
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('pollResponseForm');
            
            // Function to handle form submission
            form.addEventListener('submit', function(e) {
                // Process multiple choice checkbox groups before submission
                processMultipleChoiceQuestions();
                
                // Show confirmation dialog
                if (!confirm('Are you sure you want to submit your response? This cannot be changed later.')) {
                    e.preventDefault();
                    return false;
                }
                return true;
            });
            
            // Process multiple choice checkboxes
            function processMultipleChoiceQuestions() {
                // Find all checkbox groups (inputs with names ending in [])
                const checkboxGroups = {};
                const checkboxes = document.querySelectorAll('input[type="checkbox"][name$="[]"]');
                
                // Group checkboxes by their question ID
                checkboxes.forEach(function(checkbox) {
                    const name = checkbox.name;
                    if (!checkboxGroups[name]) {
                        checkboxGroups[name] = [];
                    }
                    
                    // If checkbox is checked, add its value to the group
                    if (checkbox.checked) {
                        checkboxGroups[name].push(checkbox.value);
                    }
                    
                    // Disable the original checkbox to prevent it from being submitted
                    checkbox.disabled = true;
                });
                
                // For each group, create a hidden input with all selected values
                for (const name in checkboxGroups) {
                    // Only create hidden input if at least one checkbox is selected
                    if (checkboxGroups[name].length > 0) {
                        const questionId = name.replace('[]', '');
                        const values = checkboxGroups[name].join(',');
                        
                        // Create hidden input with comma-separated values
                        const hiddenInput = document.createElement('input');
                        hiddenInput.type = 'hidden';
                        hiddenInput.name = name;
                        hiddenInput.value = values;
                        form.appendChild(hiddenInput);
                        
                        console.log(`Added multiple choice values for ${name}: ${values}`);
                    }
                }
            }
        });
    </script>
} 