@model IEnumerable<CommunityPortal.Models.Forum.ForumPost>
@{
    ViewData["Title"] = "Community Forum";
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    var isAdmin = ViewBag.IsAdmin;
    var isStaff = ViewBag.IsStaff;
    var userRoles = ViewBag.UserRoles as Dictionary<string, string>;
}

<div class="forum-container">
    <!-- Header -->
    <header class="forum-header">
        <h1>@ViewData["Title"]</h1>
        <a asp-action="Create" class="btn btn-primary btn-create">
            <i class="bi bi-plus-lg"></i> New Post
        </a>
    </header>

    <!-- Forum Posts -->
    <div class="forum-posts">
        @foreach (var post in Model)
        {
            <article class="post-card">
                <header class="post-header">
                    <div class="author-info">
                        <div class="avatar">
                            @if (!string.IsNullOrEmpty(post.Author?.ProfileImagePath))
                            {
                                <img src="@post.Author.ProfileImagePath" alt="@post.Author?.UserName" />
                            }
                            else
                            {
                                <i class="bi bi-person-fill"></i>
                            }
                        </div>
                        <div class="author-details">
                            <h2>@post.Title</h2>
                            <div class="meta">
                                <span class="author">@post.Author?.UserName</span>
                                @if (isAdmin || isStaff)
                                {
                                    <span class="role">@userRoles[post.Author.Id]</span>
                                }
                                <time datetime="@post.CreatedAt.ToString("o")">
                                    @post.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy")
                                </time>
                                @if (post.UpdatedAt.HasValue && post.UpdatedAt > post.CreatedAt)
                                {
                                    <span class="edited">
                                        (Edited @post.UpdatedAt.Value.ToLocalTime().ToString("MMM dd, yyyy"))
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    @if (currentUserId == post.AuthorId || isAdmin)
                    {
                        <div class="post-actions">
                            <button class="btn-actions" data-bs-toggle="dropdown">
                                <i class="bi bi-three-dots"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@post.Id">Edit</a></li>
                                <li>
                                    <form asp-action="Delete" asp-route-id="@post.Id" method="post"
                                          data-confirm="Are you sure you want to delete this post?">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="dropdown-item text-danger">Delete</button>
                                    </form>
                                </li>
                            </ul>
                        </div>
                    }
                </header>

                <div class="post-content">
                    <p>@post.Content</p>
                    @if (!string.IsNullOrEmpty(post.ImagePath))
                    {
                        <figure>
                            <img src="@post.ImagePath" alt="Post image" loading="lazy" />
                        </figure>
                    }
                </div>

                <footer class="post-footer">
                    <button class="btn-action like-btn @(post.Likes.Any(l => l.UserId == currentUserId) ? "active" : "")"
                            data-post-id="@post.Id">
                        <i class="bi @(post.Likes.Any(l => l.UserId == currentUserId) ? "bi-heart-fill" : "bi-heart")"></i>
                        <span class="count">@post.Likes.Count</span>
                    </button>
                    <button class="btn-action comment-btn" data-post-id="@post.Id">
                        <i class="bi bi-chat"></i>
                        <span class="count">@post.Comments.Count(c => !c.IsDeleted)</span>
                    </button>
                </footer>

                <!-- Comments -->
                <section class="comments" id="comments-@post.Id">
                    <div class="comments-container">
                        @foreach (var comment in post.Comments.Where(c => !c.ParentCommentId.HasValue).OrderByDescending(c => c.CreatedAt))
                        {
                            <div class="comment">
                                <div class="avatar">
                                    @if (!string.IsNullOrEmpty(comment.Author?.ProfileImagePath))
                                    {
                                        <img src="@comment.Author.ProfileImagePath" alt="@comment.Author?.UserName" />
                                    }
                                    else
                                    {
                                        <i class="bi bi-person-fill"></i>
                                    }
                                </div>
                                <div class="comment-content">
                                    <div class="comment-header">
                                        <span class="author">@comment.Author?.UserName</span>
                                        @if (isAdmin || isStaff)
                                        {
                                            <span class="role">@userRoles[comment.Author.Id]</span>
                                        }
                                        <time datetime="@comment.CreatedAt.ToString("o")">
                                            @comment.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy")
                                        </time>
                                        @if (comment.UpdatedAt.HasValue && comment.UpdatedAt > comment.CreatedAt)
                                        {
                                            <span class="edited">(Edited)</span>
                                        }
                                    </div>
                                    <p>@comment.Content</p>
                                    <div class="comment-actions">
                                        <button class="btn-action like-btn @(comment.Likes.Any(l => l.UserId == currentUserId) ? "active" : "")"
                                                data-comment-id="@comment.Id">
                                            <i class="bi @(comment.Likes.Any(l => l.UserId == currentUserId) ? "bi-heart-fill" : "bi-heart")"></i>
                                            <span class="count">@comment.Likes.Count</span>
                                        </button>
                                        <button class="btn-action reply-btn" data-comment-id="@comment.Id">
                                            <i class="bi bi-reply"></i> Reply
                                        </button>
                                        @if (currentUserId == comment.AuthorId || isAdmin)
                                        {
                                            <form asp-action="DeleteComment" asp-route-id="@comment.Id" method="post"
                                                  data-confirm="Are you sure you want to delete this comment?">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn-action text-danger">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </form>
                                        }
                                    </div>

                                    <!-- Replies -->
                                    @foreach (var reply in comment.Replies.Where(r => !r.IsDeleted).OrderBy(r => r.CreatedAt))
                                    {
                                        <div class="comment reply">
                                            <div class="avatar">
                                                @if (!string.IsNullOrEmpty(reply.Author?.ProfileImagePath))
                                                {
                                                    <img src="@reply.Author.ProfileImagePath" alt="@reply.Author?.UserName" />
                                                }
                                                else
                                                {
                                                    <i class="bi bi-person-fill"></i>
                                                }
                                            </div>
                                            <div class="comment-content">
                                                <div class="comment-header">
                                                    <span class="author">@reply.Author?.UserName</span>
                                                    @if (isAdmin || isStaff)
                                                    {
                                                        <span class="role">@userRoles[reply.Author.Id]</span>
                                                    }
                                                    <time datetime="@reply.CreatedAt.ToString("o")">
                                                        @reply.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy")
                                                    </time>
                                                    @if (reply.UpdatedAt.HasValue && reply.UpdatedAt > reply.CreatedAt)
                                                    {
                                                        <span class="edited">(Edited)</span>
                                                    }
                                                </div>
                                                <p>@reply.Content</p>
                                                <div class="comment-actions">
                                                    <button class="btn-action like-btn @(reply.Likes.Any(l => l.UserId == currentUserId) ? "active" : "")"
                                                            data-comment-id="@reply.Id">
                                                        <i class="bi @(reply.Likes.Any(l => l.UserId == currentUserId) ? "bi-heart-fill" : "bi-heart")"></i>
                                                        <span class="count">@reply.Likes.Count</span>
                                                    </button>
                                                    @if (currentUserId == reply.AuthorId || isAdmin)
                                                    {
                                                        <form asp-action="DeleteComment" asp-route-id="@reply.Id" method="post"
                                                              data-confirm="Are you sure you want to delete this reply?">
                                                            @Html.AntiForgeryToken()
                                                            <button type="submit" class="btn-action text-danger">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </form>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    <!-- Reply Form -->
                                    <form asp-action="Comment" method="post" class="reply-form" id="reply-form-@comment.Id">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="postId" value="@post.Id" />
                                        <input type="hidden" name="parentCommentId" value="@comment.Id" />
                                        <div class="input-group">
                                            <input type="text" name="content" class="form-control" placeholder="Write a reply..." required />
                                            <button type="submit" class="btn btn-primary"><i class="bi bi-send"></i></button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        }
                    </div>
                    <form asp-action="Comment" method="post" class="comment-form">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="postId" value="@post.Id" />
                        <div class="input-group">
                            <input type="text" name="content" class="form-control" placeholder="Add a comment..." required />
                            <button type="submit" class="btn btn-primary"><i class="bi bi-send"></i></button>
                        </div>
                    </form>
                </section>
            </article>
        }
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        .forum-container {
            max-width: 900px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .forum-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #eee;
        }

            .forum-header h1 {
                font-size: 2rem;
                font-weight: 600;
                color: #2c3e50;
            }

        .btn-create {
            padding: 0.5rem 1.25rem;
            border-radius: 20px;
            transition: all 0.3s ease;
        }

            .btn-create:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            }

        .post-card {
            background: white;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
            overflow: hidden;
        }

            .post-card:hover {
                box-shadow: 0 4px 16px rgba(0,0,0,0.1);
            }

        .post-header {
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            border-bottom: 1px solid #f5f5f5;
        }

        .author-info {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            overflow: hidden;
            background: #eee;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

            .avatar img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .avatar i {
                font-size: 1.5rem;
                color: #666;
            }

        .author-details h2 {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0;
            color: #2c3e50;
        }

        .meta {
            color: #666;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

            .meta .author {
                font-weight: 500;
            }

            .meta .role {
                color: #007bff;
                margin-left: 0.5rem;
            }

            .meta time {
                margin-left: 0.5rem;
            }

            .meta .edited {
                color: #999;
                margin-left: 0.5rem;
            }

        .btn-actions {
            background: none;
            border: none;
            padding: 0.25rem 0.5rem;
            color: #666;
            transition: all 0.2s;
        }

            .btn-actions:hover {
                color: #2c3e50;
                background: #f5f5f5;
                border-radius: 4px;
            }

        .post-content {
            padding: 1.5rem;
        }

            .post-content p {
                margin: 0;
                line-height: 1.6;
                color: #333;
            }

            .post-content figure {
                margin: 1rem 0 0;
                border-radius: 8px;
                overflow: hidden;
            }

            .post-content img {
                max-width: 100%;
                height: auto;
                display: block;
            }

        .post-footer {
            padding: 0 1.5rem 1rem;
            display: flex;
            gap: 1rem;
            border-bottom: 1px solid #f5f5f5;
        }

        .btn-action {
            background: none;
            border: none;
            color: #666;
            padding: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s;
            font-size: 0.875rem;
        }

            .btn-action:hover {
                color: #007bff;
            }

            .btn-action.active {
                color: #e74c3c;
            }

            .btn-action .count {
                font-weight: 500;
            }

        .comments {
            padding: 1rem 1.5rem;
            background: #fafafa;
            display: none;
        }

        .comments-container {
            max-height: 400px;
            overflow-y: auto;
            margin-bottom: 1rem;
        }

        .comment {
            display: flex;
            gap: 1rem;
            padding: 0.75rem;
            border-radius: 8px;
            margin-bottom: 0.75rem;
            background: white;
        }

            .comment.reply {
                margin-left: 48px;
            }

            .comment .avatar {
                width: 32px;
                height: 32px;
            }

        .comment-content {
            flex: 1;
        }

        .comment-header {
            margin-bottom: 0.25rem;
        }

            .comment-header .author {
                font-weight: 500;
                color: #2c3e50;
            }

            .comment-header .role {
                color: #007bff;
                margin-left: 0.5rem;
            }

            .comment-header time {
                color: #666;
                font-size: 0.875rem;
                margin-left: 0.5rem;
            }

            .comment-header .edited {
                color: #999;
                font-size: 0.875rem;
                margin-left: 0.5rem;
            }

        .comment p {
            margin: 0 0 0.5rem;
            color: #333;
            line-height: 1.5;
        }

        .comment-actions {
            display: flex;
            gap: 1rem;
        }

        .reply-form {
            margin-left: 48px;
            display: none;
        }

        .comment-form, .reply-form {
            margin-top: 1rem;
        }

        .input-group {
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

            .input-group .form-control {
                border: none;
                padding: 0.75rem 1rem;
                box-shadow: none;
            }

            .input-group .btn {
                padding: 0.75rem 1.25rem;
                border: none;
            }

        .alert-overlay {
            position: fixed;
            top: 1rem;
            right: 1rem;
            z-index: 1050;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .alert {
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: slideIn 0.3s ease-out;
        }

        @@keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            // Toggle comments
            $('.comment-btn').click(function () {
                const postId = $(this).data('post-id');
                $(`#comments-${postId}`).slideToggle(300);
            });

            // Toggle reply form
            $('.reply-btn').click(function () {
                const commentId = $(this).data('comment-id');
                $(`#reply-form-${commentId}`).slideToggle(300);
            });

            // Handle likes
            $('.like-btn').click(function () {
                const $btn = $(this);
                const postId = $btn.data('post-id');
                const commentId = $btn.data('comment-id');

                $.post('/Forum/Like', { postId, commentId })
                    .done(() => {
                        const $count = $btn.find('.count');
                        const count = parseInt($count.text());
                        const isActive = $btn.hasClass('active');

                        $btn.toggleClass('active');
                        $count.text(isActive ? count - 1 : count + 1);
                        $btn.find('i').toggleClass('bi-heart bi-heart-fill');
                    });
            });

            // Delete confirmation
            $('form[data-confirm]').submit(function (e) {
                if (!confirm($(this).data('confirm'))) {
                    e.preventDefault();
                }
            });
        });
    </script>
}