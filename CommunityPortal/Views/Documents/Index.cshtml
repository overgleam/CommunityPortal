@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model CommunityPortal.Models.Documents.DocumentListViewModel
@using CommunityPortal.Models.Enums
@using CommunityPortal.Models.Utilities
@{
    ViewData["Title"] = "Document Library";
}

<div class="container mt-4">
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h1 class="card-title mb-0">
                    <i class="material-icons align-middle me-2">library_books</i>Document Library
                </h1>
                <div>
                    @if (User.IsInRole("admin"))
                    {
                        <a asp-action="Upload" class="btn btn-success">
                            <i class="material-icons align-middle me-1">upload_file</i> Upload
                        </a>
                        <a asp-action="Manage" class="btn btn-outline-secondary ms-2">
                            <i class="material-icons align-middle me-1">settings</i> Manage
                        </a>
                    }
                </div>
            </div>
            
            <form method="get" id="filterForm" class="mb-3">
                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text"><i class="material-icons">search</i></span>
                            <input type="text" name="searchTerm" class="form-control" placeholder="Search documents..." value="@Model.SearchTerm">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text"><i class="material-icons">category</i></span>
                            <select name="category" id="categoryFilter" class="form-select">
                                <option value="">All Categories</option>
                                @{
                                    foreach (DocumentCategory categoryItem in Enum.GetValues(typeof(DocumentCategory)))
                                    {
                                        if (Model.CategoryFilter.HasValue && Model.CategoryFilter.Value == categoryItem)
                                        {
                                            <option value="@((int)categoryItem)" selected>@categoryItem.GetDisplayName()</option>
                                        }
                                        else
                                        {
                                            <option value="@((int)categoryItem)">@categoryItem.GetDisplayName()</option>
                                        }
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="d-flex">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="material-icons align-middle">filter_list</i> Search
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                                <i class="material-icons align-middle">clear</i>
                            </a>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card-deck">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="card shadow-sm h-100">
                            <div class="card-body text-center">
                                <i class="material-icons text-primary mb-3" style="font-size: 3rem;">menu_book</i>
                                <h5 class="card-title">Community Guidelines</h5>
                                <p class="card-text">Access community rules, regulations, and guidelines.</p>
                                <a asp-action="CommunityGuidelines" class="btn btn-outline-primary">
                                    <i class="material-icons align-middle me-1">visibility</i> View Guidelines
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card shadow-sm h-100">
                            <div class="card-body text-center">
                                <i class="material-icons text-danger mb-3" style="font-size: 3rem;">emergency</i>
                                <h5 class="card-title">Emergency Contacts</h5>
                                <p class="card-text">Important contact information for emergencies.</p>
                                <a asp-action="EmergencyContacts" class="btn btn-outline-danger">
                                    <i class="material-icons align-middle me-1">contact_phone</i> View Contacts
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card shadow-sm h-100">
                            <div class="card-body text-center">
                                <i class="material-icons text-success mb-3" style="font-size: 3rem;">folder_copy</i>
                                <h5 class="card-title">Document Categories</h5>
                                <p class="card-text">Filter documents by specific categories.</p>
                                <div class="dropdown">
                                    <button class="btn btn-outline-success dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="material-icons align-middle me-1">filter_list</i> Select Category
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                        @foreach (DocumentCategory category in Enum.GetValues(typeof(DocumentCategory)))
                                        {
                                            <li><a class="dropdown-item" href="@Url.Action("Index", new { category = category })">@category.GetDisplayName()</a></li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!Model.Documents.Any())
    {
        <div class="alert alert-info shadow-sm">
            <div class="d-flex align-items-center">
                <i class="material-icons me-3 fs-1">info</i>
                <div>
                    <h5 class="alert-heading">No Documents Found</h5>
                    <p class="mb-0">No documents match your current filter criteria. Try adjusting your search or filters.</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row g-3">
            @foreach (var document in Model.Documents)
            {
                <div class="col-md-4 mb-3">
                    <div class="card h-100 shadow-sm">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="badge bg-primary rounded-pill">@document.Category.GetDisplayName()</span>
                            <small class="text-muted">@document.UploadDate.ToString("MMM dd, yyyy")</small>
                        </div>
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-2">
                                <i class="material-icons me-2">@(GetFileIcon(document.FileType))</i>
                                <h5 class="card-title mb-0">@document.Title</h5>
                            </div>
                            <p class="card-text">@(string.IsNullOrEmpty(document.Description) ? "No description provided." : document.Description)</p>
                            <small class="text-muted d-block mb-2">
                                @document.FileName (@(document.FileSizeInKB < 1024 ? $"{document.FileSizeInKB} KB" : $"{document.FileSizeInKB / 1024:F2} MB"))
                            </small>
                        </div>
                        <div class="card-footer bg-transparent d-flex justify-content-between">
                            <a asp-action="Download" asp-route-id="@document.Id" class="btn btn-sm btn-primary">
                                <i class="material-icons align-middle me-1">download</i> Download
                            </a>
                            @if (User.IsInRole("admin"))
                            {
                                <button type="button" class="btn btn-sm btn-danger delete-btn" data-id="@document.Id" data-title="@document.Title">
                                    <i class="material-icons align-middle me-1">delete</i> Delete
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        @await Html.PartialAsync("_Pagination", Model)
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="material-icons align-middle me-2">warning</i>Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the document "<span id="deleteDocumentTitle"></span>"?</p>
                <p class="mb-0 text-muted">This action will make the document inaccessible to users.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="material-icons align-middle me-1">close</i>Cancel
                </button>
                <a href="#" id="confirmDeleteBtn" class="btn btn-danger">
                    <i class="material-icons align-middle me-1">delete</i>Delete
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Material Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script>
        $(document).ready(function () {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Show notification when filters are applied
            @if (Model.CategoryFilter.HasValue || !string.IsNullOrEmpty(Model.SearchTerm))
            {
                <text>
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                });

                Toast.fire({
                    icon: 'info',
                    title: 'Filters Applied',
                    text: 'Documents are being filtered based on your criteria'
                });
                </text>
            }
            
            // Handle delete button click
            $('.delete-btn').click(function() {
                const id = $(this).data('id');
                const title = $(this).data('title');
                $('#deleteDocumentTitle').text(title);
                $('#confirmDeleteBtn').attr('href', '@Url.Action("Delete")/' + id);
                $('#deleteModal').modal('show');
            });
        });
    </script>
}

@functions {
    public string GetFileIcon(string fileType)
    {
        switch (fileType.ToLower())
        {
            case ".pdf":
                return "picture_as_pdf";
            case ".doc":
            case ".docx":
                return "description";
            case ".xls":
            case ".xlsx":
                return "table_chart";
            case ".ppt":
            case ".pptx":
                return "slideshow";
            case ".txt":
                return "article";
            case ".jpg":
            case ".jpeg":
            case ".png":
                return "image";
            default:
                return "insert_drive_file";
        }
    }
}
