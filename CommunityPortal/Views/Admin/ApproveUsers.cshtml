@model CommunityPortal.Models.Admin.ApproveUsersViewModel

@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Manage Users";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css" />
}

<div class="user-management-container">
    <div class="header-section">
        <h2><i class="material-icons">manage_accounts</i> @ViewData["Title"]</h2>
        <p class="text-muted">Manage and monitor user accounts</p>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert custom-alert success" role="alert" id="successAlert">
            <i class="material-icons">check_circle</i>
            <span>@TempData["SuccessMessage"]</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert custom-alert error" role="alert" id="errorAlert">
            <i class="material-icons">error</i>
            <span>@TempData["ErrorMessage"]</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.Users != null && Model.Users.Any())
    {
        <div class="table-container">
            <table class="custom-table table" id="usersTable">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Users.Count; i++)
                    {
                        var userWithRole = Model.Users[i];
                        var user = userWithRole.User;
                        <tr>
                            <td>@(i + 1)</td>
                            <td>
                                <div class="user-email">
                                    <i class="material-icons">account_circle</i>
                                    <span>@user.Email</span>
                                </div>
                            </td>
                            <td>
                                <span class="role-badge @userWithRole.Role.ToLower()">
                                    <i class="material-icons">@GetRoleIcon(userWithRole.Role)</i>
                                    @CapitalizeFirstLetter(userWithRole.Role)
                                </span>
                            </td>
                            <td>
                                @switch (userWithRole.User.Status)
                                {
                                    case CommunityPortal.Models.Enums.UserStatus.Approved:
                                        <span class="status-badge approved">
                                            <i class="material-icons">check_circle</i> Approved
                                        </span>
                                        break;
                                    case CommunityPortal.Models.Enums.UserStatus.Disabled:
                                        <span class="status-badge disabled">
                                            <i class="material-icons">block</i> Disabled
                                        </span>
                                        break;
                                    case CommunityPortal.Models.Enums.UserStatus.PendingApproval:
                                        <span class="status-badge pending">
                                            <i class="material-icons">pending</i> Pending Approval
                                        </span>
                                        break;
                                    case CommunityPortal.Models.Enums.UserStatus.Banned:
                                        <span class="status-badge banned">
                                            <i class="material-icons">report</i> Banned
                                        </span>
                                        break;
                                    default:
                                        <span class="status-badge unknown">
                                            <i class="material-icons">help</i> Unknown
                                        </span>
                                        break;
                                }
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <button type="button" class="btn custom-btn info" data-bs-toggle="modal"
                                            data-bs-target="#userDetailsModal" data-user-id="@user.Id">
                                        <i class="material-icons">info</i> Details
                                    </button>
                                    
                                    @if (userWithRole.User.Status == CommunityPortal.Models.Enums.UserStatus.PendingApproval)
                                    {
                                        <form asp-action="ApproveUser" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="userId" value="@user.Id" />
                                            <button type="submit" class="btn custom-btn success">
                                                <i class="material-icons">check</i> Approve
                                            </button>
                                        </form>
                                        <form asp-action="BanUser" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="userId" value="@user.Id" />
                                            <button type="submit" class="btn custom-btn danger">
                                                <i class="material-icons">block</i> Ban
                                            </button>
                                        </form>
                                    }
                                    else if (userWithRole.User.Status == CommunityPortal.Models.Enums.UserStatus.Approved)
                                    {
                                        <form asp-action="DisableUser" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="userId" value="@user.Id" />
                                            <button type="submit" class="btn custom-btn danger">
                                                <i class="material-icons">block</i> Disable
                                            </button>
                                        </form>
                                        <form asp-action="BanUser" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="userId" value="@user.Id" />
                                            <button type="submit" class="btn custom-btn danger">
                                                <i class="material-icons">block</i> Ban
                                            </button>
                                        </form>
                                    }
                                    else if (userWithRole.User.Status == CommunityPortal.Models.Enums.UserStatus.Disabled)
                                    {
                                        <form asp-action="ApproveUser" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="userId" value="@user.Id" />
                                            <button type="submit" class="btn custom-btn success">
                                                <i class="material-icons">check</i> Approve
                                            </button>
                                        </form>
                                        <form asp-action="BanUser" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="userId" value="@user.Id" />
                                            <button type="submit" class="btn custom-btn danger">
                                                <i class="material-icons">block</i> Ban
                                            </button>
                                        </form>
                                    }
                                    else if (userWithRole.User.Status == CommunityPortal.Models.Enums.UserStatus.Banned)
                                    {
                                        <form asp-action="UnbanUser" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="userId" value="@user.Id" />
                                            <button type="submit" class="btn custom-btn success">
                                                <i class="material-icons">undo</i> Unban
                                            </button>
                                        </form>
                                    }

                                    @if (userWithRole.User.Status != CommunityPortal.Models.Enums.UserStatus.Banned)
                                    {
                                        <button type="button" class="btn custom-btn warning delete-user-btn"
                                                data-user-id="@user.Id" data-user-email="@user.Email">
                                            <i class="material-icons">delete</i> Remove
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="no-users-message">
            <i class="material-icons">person_off</i>
            <p>No users found.</p>
        </div>
    }
</div>

<!-- User Details Modal -->
<div class="modal fade custom-modal" id="userDetailsModal" tabindex="-1" aria-labelledby="userDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="material-icons">person_search</i> User Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="modalContent">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading user details...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Remove User Confirmation Modal -->
<div class="modal fade custom-modal" id="removeUserModal" tabindex="-1" aria-labelledby="removeUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="removeUserForm" asp-action="RemoveUser" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="material-icons">warning</i> Confirm User Removal
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="warning-message" id="removeUserMessage"></div>
                    <input type="hidden" name="userId" id="removeUserId" value="" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn custom-btn secondary" data-bs-dismiss="modal">
                        <i class="material-icons">close</i> Cancel
                    </button>
                    <button type="submit" class="btn custom-btn warning">
                        <i class="material-icons">delete_forever</i> Remove
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>

    <script>
        $(document).ready(function () {
            // Initialize DataTables with custom styling
            $('#usersTable').DataTable({
                "paging": true,
                "searching": true,
                "ordering": true,
                "order": [[0, "asc"]],
                "columnDefs": [
                    { "orderable": false, "targets": [3] }
                ],
                "language": {
                    "search": "Search users:",
                    "paginate": {
                        "first": '<i class="material-icons">first_page</i>',
                        "last": '<i class="material-icons">last_page</i>',
                        "next": '<i class="material-icons">chevron_right</i>',
                        "previous": '<i class="material-icons">chevron_left</i>'
                    }
                },
                "dom": '<"top"f>rt<"bottom"lip><"clear">'
            });

            // Handle User Details Modal
            var userDetailsModal = document.getElementById('userDetailsModal');
            userDetailsModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var userId = button.getAttribute('data-user-id');

                var modalContent = document.getElementById('modalContent');
                modalContent.innerHTML = `
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading user details...</p>
                    </div>`;

                fetch('/Admin/GetUserDetails?userId=' + userId)
                    .then(response => response.text())
                    .then(html => {
                        modalContent.innerHTML = html;
                    })
                    .catch(error => {
                        modalContent.innerHTML = `
                            <div class="alert custom-alert error" role="alert">
                                <i class="material-icons">error</i>
                                <span>Failed to load user details.</span>
                            </div>`;
                        console.error('Error fetching user details:', error);
                    });
            });

            // Handle Remove User Button Click
            $('.delete-user-btn').on('click', function () {
                var userId = $(this).data('user-id');
                var userEmail = $(this).data('user-email');

                $('#removeUserId').val(userId);
                $('#removeUserMessage').html(`
                    <div class="text-center mb-3">
                        <i class="material-icons" style="font-size: 3rem; color: #e65100;">warning</i>
                    </div>
                    <p>Are you sure you want to remove the user with email: <strong>${userEmail}</strong>?</p>
                    <p class="mt-3"><strong>Warning:</strong> This action is permanent and cannot be undone.</p>
                `);
                var removeUserModal = new bootstrap.Modal(document.getElementById('removeUserModal'));
                removeUserModal.show();
            });

            // Auto-dismiss alerts
            setTimeout(function () {
                $('.custom-alert').fadeOut('slow');
            }, 5000);
        });
    </script>
}

@functions {
    private string GetRoleIcon(string role)
    {
        return role.ToLower() switch
        {
            "admin" => "admin_panel_settings",
            "staff" => "support_agent",
            "homeowners" => "home",
            _ => "person"
        };
    }

    private string CapitalizeFirstLetter(string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;
        return char.ToUpper(text[0]) + text[1..].ToLower();
    }
}

<style>
    .user-management-container {
        padding: 2rem;
        background: #fff;
        border-radius: 15px;
        box-shadow: 0 2px 15px rgba(0,0,0,0.05);
    }

    .header-section {
        margin-bottom: 0rem;
    }

        .header-section h2 {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #2c3e50;
            margin-bottom: 0rem;
        }

        .header-section .material-icons {
            font-size: 2rem;
            color: #3498db;
        }

    .table-container {
        padding: 5px;
        background: #f8f9fa;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(0,0,0,0.05);
    }

    .dataTables_wrapper .dataTables_filter input:focus {
        border-color: #86b7fe;
        outline: none;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .dataTables_wrapper .dataTables_filter input {
        margin-left: 1rem;
        padding: 8px 12px 8px 40px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 0.9rem;
        width: 250px;
        background: #fff url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%23495057' viewBox='0 0 16 16'%3E%3Cpath d='M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z'%3E%3C/path%3E%3C/svg%3E") no-repeat 12px center;
        transition: all 0.2s;
    }

    .dataTables_wrapper .dataTables_length {
        margin: 20px 0px;
    }

        .dataTables_wrapper .dataTables_length select {
            padding: 8px 36px 8px 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 0.9rem;
            background: #fff url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e") no-repeat;
            background-position: right 12px center;
            background-size: 16px 12px;
            appearance: none;
            -webkit-appearance: none;
            cursor: pointer;
            min-width: 100px;
        }

            .dataTables_wrapper .dataTables_length select:focus {
                border-color: #86b7fe;
                outline: none;
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            }

    table.dataTable tbody th, table.dataTable tbody td {
        padding: 1rem;
    }

    .custom-table {
        margin-bottom: 0;
    }

        .custom-table th {
            padding: 1rem;
            font-weight: 600;
            color: #2c3e50;
            border-bottom: 2px solid #e9ecef;
        }

        .custom-table td {
            padding: 1rem;
            vertical-align: middle;
        }

    .user-email {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .user-email .material-icons {
            color: #7f8c8d;
        }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.875rem;
    }

        .status-badge.approved {
            background: #d4edda;
            color: #155724;
        }

        .status-badge.pending {
            background: #fff3cd;
            color: #856404;
        }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .custom-btn {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-size: 0.875rem;
        transition: all 0.3s ease;
        border: none;
    }

        .custom-btn:hover {
            transform: translateY(-1px);
        }

        .custom-btn.info {
            background: #e3f2fd;
            color: #0d47a1;
        }

        .custom-btn.success {
            background: #e8f5e9;
            color: #1b5e20;
        }

        .custom-btn.danger {
            background: #ffebee;
            color: #b71c1c;
        }

        .custom-btn.warning {
            background: #fff3e0;
            color: #e65100;
        }

        .custom-btn.secondary {
            background: #eceff1;
            color: #263238;
        }

    .custom-alert {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        border: none;
    }

        .custom-alert.success {
            background: #d4edda;
            color: #155724;
        }

        .custom-alert.error {
            background: #f8d7da;
            color: #721c24;
        }

    .custom-modal .modal-content {
        border-radius: 15px;
        border: none;
    }

    .custom-modal .modal-header {
        background: #f8f9fa;
        border-bottom: 2px solid #e9ecef;
    }

    .custom-modal .modal-title {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #2c3e50;
    }

    .warning-message {
        background: #fff3cd;
        padding: 1rem;
        border-radius: 8px;
        color: #856404;
    }

    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
        padding: 2rem;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .no-users-message {
        text-align: center;
        padding: 3rem;
        color: #6c757d;
    }

        .no-users-message .material-icons {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .role-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.25rem 0.75rem;
        border-radius: 50px;
        font-size: 0.875rem;
        font-weight: 500;
    }

        .role-badge.admin {
            background-color: #cff4fc;
            color: #055160;
        }

        .role-badge.staff {
            background-color: #d1e7dd;
            color: #0f5132;
        }

        .role-badge.homeowners {
            background-color: #fff3cd;
            color: #664d03;
        }

        .role-badge i {
            font-size: 1rem;
        }

    .status-badge.disabled {
        background: #f8d7da;
        color: #721c24;
    }

    .status-badge.banned {
        background: #f5c6cb;
        color: #721c24;
    }

    .status-badge.pending {
        background: #fff3cd;
        color: #856404;
    }

    .status-badge.approved {
        background: #d4edda;
        color: #155724;
    }

    .status-badge.unknown {
        background: #e2e3e5;
        color: #6c757d;
    }

</style>