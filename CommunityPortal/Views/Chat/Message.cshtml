@model CommunityPortal.Models.Chat.ChatViewModel

@{
    ViewData["Title"] = "Chat";
}

@section Styles {
    <link rel="stylesheet" href="~/css/chat/message.css" asp-append-version="true" />
}

<div class="chat-container">
    <div class="chat-header">
        <h3>@Model.RecipientUsername</h3>
    </div>
    <div class="chat-messages" id="chatMessages" style="overflow-y: auto;">
        @if (Model.Messages.Any())
        {
            <partial name="_ChatMessagesPartial" model="Model.Messages" />
        }
        else
        {
            <div class="no-messages">Be the first one to message</div>
        }
    </div>
    <div class="chat-input">
        <input type="text" id="messageInput" placeholder="Type your message here..." />
        <button id="sendButton" class="btn btn-primary">Send</button>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        const currentUserFullName = "@Model.CurrentUserFullName";
        const recipientId = "@Model.RecipientId";

        let skip = @Model.Messages.Count;
        const take = 20;
        let loading = false;
        let hasMore = @Model.Messages.Count >= take;

        connection.on("ReceiveMessage", function (senderFullName, message, timestamp) {
            const messageContainer = document.getElementById("chatMessages");
            
            // Remove "Be the first one to message" if it exists
            const noMessagesDiv = messageContainer.querySelector('.no-messages');
            if (noMessagesDiv) {
                noMessagesDiv.remove();
            }

            const messageDiv = document.createElement("div");
            messageDiv.classList.add("message");
            messageDiv.classList.add(senderFullName === currentUserFullName ? "sent" : "received");

            messageDiv.innerHTML = `
                <span class="message-sender">${senderFullName}</span>
                <p>${message}</p>
                <span class="message-timestamp">${timestamp}</span>
            `;
            messageContainer.appendChild(messageDiv);
            messageContainer.scrollTop = messageContainer.scrollHeight;
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("sendButton").addEventListener("click", function (event) {
            const message = document.getElementById("messageInput").value;
            const recipientId = "@Model.RecipientId";

            if (message.trim() !== "") {
                // Show the message immediately in the UI
                const messageContainer = document.getElementById("chatMessages");
                
                // Remove "Be the first one to message" if it exists
                const noMessagesDiv = messageContainer.querySelector('.no-messages');
                if (noMessagesDiv) {
                    noMessagesDiv.remove();
                }

                const messageDiv = document.createElement("div");
                messageDiv.classList.add("message");
                messageDiv.classList.add("sent");

                const now = new Date();
                const timestamp = now.toLocaleString();

                messageDiv.innerHTML = `
                    <span class="message-sender">${currentUserFullName}</span>
                    <p>${message}</p>
                    <span class="message-timestamp">${timestamp}</span>
                `;
                messageContainer.appendChild(messageDiv);
                messageContainer.scrollTop = messageContainer.scrollHeight;

                // Send the message to the server
                connection.invoke("SendMessage", recipientId, message).catch(function (err) {
                    return console.error(err.toString());
                });
                document.getElementById("messageInput").value = "";
            }

            event.preventDefault();
        });

        // Allow sending message with Enter key
        document.getElementById("messageInput").addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                document.getElementById("sendButton").click();
                e.preventDefault();
            }
        });

        window.addEventListener("load", function() {
            const chatMessages = document.getElementById("chatMessages");
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });

        // Load More Messages on Scroll
        const chatMessages = document.getElementById("chatMessages");
        chatMessages.addEventListener('scroll', function() {
            if (chatMessages.scrollTop === 0 && !loading && hasMore) {
                loadMoreMessages();
            }
        });

        function loadMoreMessages() {
            if (loading || !hasMore) return;
            loading = true;
            let loadingDiv = document.createElement('div');
            loadingDiv.classList.add('loading-spinner');
            loadingDiv.innerHTML = `
                <div class="spinner"></div>
                <p>Loading older messages...</p>
            `;
            chatMessages.insertBefore(loadingDiv, chatMessages.firstChild);

            fetch(`/Chat/LoadMoreMessages?recipientId=${recipientId}&skip=${skip}&take=${take}`)
                .then(response => response.text())
                .then(html => {
                    if (loadingDiv && chatMessages.contains(loadingDiv)) {
                        chatMessages.removeChild(loadingDiv);
                    }
                    chatMessages.insertAdjacentHTML('afterbegin', html);
                    skip += take;
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const loadedMessages = doc.querySelectorAll('.message').length;
                    if (loadedMessages < take) {
                        hasMore = false;
                    }
                    loading = false;
                })
                .catch(error => {
                    console.error('Error loading more messages:', error);
                    if (loadingDiv && chatMessages.contains(loadingDiv)) {
                        chatMessages.removeChild(loadingDiv);
                    }
                    loading = false;
                });
        }
    </script>
}