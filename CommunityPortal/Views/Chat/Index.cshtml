@model IEnumerable<CommunityPortal.Models.ApplicationUser>

@{
    ViewData["Title"] = "Chat Users";
}

<div class="container my-4">
    <!-- User Categories Cards -->
    <div class="row" id="userCards">
        @foreach (var category in new[] { "Admins", "Staff", "Homeowners" })
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-@GetCategoryColor(category) text-white">
                        <h5 class="mb-0">@category</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush" id="@category.ToLower()List">
                            @foreach (var user in GetUsersByCategory(Model, category))
                            {
                                <li class="list-group-item d-flex align-items-center user-item" data-user-id="@user.Id">
                                    <img src="~/images/profile.jpg" alt="Avatar" class="rounded-circle" width="40" height="40">
                                    <div class="user-info flex-grow-1 ms-2">
                                        @{
                                            string fullName = GetFullName(user, category);
                                        }
                                        <span class="user-name">@fullName</span>
                                        <small class="text-muted">@user.UserName</small>
                                    </div>
                                    <a asp-controller="Chat" asp-action="Message" 
                                       asp-route-recipientId="@user.Id" 
                                       class="ms-auto btn btn-sm btn-outline-secondary" aria-label="Chat with @fullName">
                                        Chat
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Styles {
    <style>
        .card-header {
            text-align: center;
            font-size: 1.25rem;
        }
        .list-group {
            max-height: 400px;
            overflow-y: auto;
        }
        .user-item {
            transition: background-color 0.2s;
        }
        .user-item:hover {
            background-color: #f1f1f1;
            cursor: pointer;
        }
        .user-name {
            font-weight: bold;
        }
        .text-muted {
            font-size: 0.85rem;
        }
        /* Scrollbar Styling */
        .list-group::-webkit-scrollbar {
            width: 8px;
        }

        .list-group::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .list-group::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

        .list-group::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Handle user selection to load chat
            document.querySelectorAll('.user-item').forEach(item => {
                item.addEventListener('click', function () {
                    const userId = this.getAttribute('data-user-id');
                    window.location.href = `/Chat/Message?recipientId=${userId}`;
                });
            });
        });
    </script>
}

@functions {
    private IEnumerable<ApplicationUser> GetUsersByCategory(IEnumerable<ApplicationUser> users, string category)
    {
        return category switch
        {
            "Admins" => users.Where(u => u.Administrator != null).OrderBy(u => u.UserName),
            "Staff" => users.Where(u => u.Staff != null).OrderBy(u => u.UserName),
            "Homeowners" => users.Where(u => u.Homeowner != null).OrderBy(u => u.UserName),
            _ => Enumerable.Empty<ApplicationUser>()
        };
    }

    private string GetFullName(ApplicationUser user, string category)
    {
        return category switch
        {
            "Admins" => $"{user.Administrator.FirstName} {user.Administrator.LastName}".Trim(),
            "Staff" => $"{user.Staff.FirstName} {user.Staff.LastName}".Trim(),
            "Homeowners" => $"{user.Homeowner.FirstName} {user.Homeowner.LastName}".Trim(),
            _ => user.UserName
        };
    }

    private string GetCategoryColor(string category)
    {
        return category switch
        {
            "Admins" => "primary",
            "Staff" => "success",
            "Homeowners" => "warning",
            _ => "secondary"
        };
    }
}
