@model CommunityPortal.Models.Chat.ChatViewModel

@{
    ViewData["Title"] = "Chat with " + Model.RecipientUsername;
}

@section Styles {
    @* <link rel="stylesheet" href="~/css/chat.css" /> *@
    <style>
        .chat-container {
            max-width: 800px;
            margin: 20px auto;
            display: flex;
            flex-direction: column;
            height: 85vh;
            border: none;
            border-radius: 12px;
            overflow: hidden;
            background-color: #fff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .chat-header {
            padding: 1.5rem;
            background-color: #f8f9fa;
            color: #2c3e50;
            border-bottom: 1px solid #e9ecef;
        }

        .chat-messages {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
            background-color: #fafafa;
        }

        .message {
            margin-bottom: 1.5rem;
            max-width: 65%;
            min-width: 120px;
            width: fit-content;
            padding: 1rem 1.25rem;
            border-radius: 1.25rem;
            position: relative;
            transition: transform 0.2s ease;
        }

        .message.sent {
            background: #007bff;
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }

        .message.received {
            background: #ffffff;
            color: #2c3e50;
            border: 1px solid #e9ecef;
            margin-right: auto;
            border-bottom-left-radius: 4px;
        }

        .message:hover {
            transform: translateX(5px);
        }

        .message-sender {
            font-weight: 600;
            font-size: 0.85rem;
            margin-bottom: 0.5rem;
            display: block;
        }

        .message-timestamp {
            font-size: 0.75rem;
            color: rgba(255, 255, 255, 0.8);
            margin-top: 0.5rem;
            display: block;
            text-align: right;
        }

        .message.received .message-timestamp {
            color: rgba(44, 62, 80, 0.6);
        }

        .chat-input {
            display: flex;
            padding: 1.5rem;
            background-color: #fff;
            border-top: 1px solid #e9ecef;
            gap: 1rem;
        }

        .chat-input input {
            flex: 1;
            padding: 0.75rem 1.25rem;
            font-size: 1rem;
            border: 1px solid #e9ecef;
            border-radius: 2rem;
            background: #f8f9fa;
            transition: all 0.3s ease;
        }

        .chat-input input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
        }

        .chat-input button {
            margin: 0;
            padding: 0.75rem 1.5rem;
            border-radius: 2rem;
            background: #007bff;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .chat-input button:hover {
            background: #0056b3;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        /* Webkit browsers (Chrome, Safari, newer versions of Opera) */
        .chat-messages::-webkit-scrollbar {
            width: 8px;  /* Width of the scrollbar */
        }

        .chat-messages::-webkit-scrollbar-track {
            background: #f1f1f1;  /* Color of the tracking area */
            border-radius: 10px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: #888;  /* Color of the scroll thumb */
            border-radius: 10px;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: #555;  /* Color of the scroll thumb on hover */
        }

        /* Firefox */
        .chat-messages {
            scrollbar-width: thin;  /* "auto" or "thin" */
            scrollbar-color: #888 #f1f1f1;  /* thumb and track color */
        }
        /* No Messagee */
        .no-messages {
            text-align: center;
            color: #888;
            margin-top: 2rem;
            font-size: 1.2rem;
        }

        /* Optional: Loader styles */
        .loader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 1rem auto;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
}

<div class="chat-container">
    <div class="chat-header">
        <h3>Chat with @Model.RecipientUsername</h3>
    </div>
    <div class="chat-messages" id="chatMessages" style="overflow-y: auto;">
        @if (Model.Messages.Any())
        {
            @foreach (var message in Model.Messages)
            {
                <div class="message @(message.SenderFullName == Model.CurrentUserFullName ? "sent" : "received")">
                    <span class="message-sender">@message.SenderFullName</span>
                    <p>@message.Message</p>
                    <span class="message-timestamp">@message.Timestamp</span>
                </div>
            }
        }
        else
        {
            <div class="no-messages">Be the first one to message</div>
        }
    </div>
    <div class="chat-input">
        <input type="text" id="messageInput" placeholder="Type your message here..." />
        <button id="sendButton" class="btn btn-primary">Send</button>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        const currentUserFullName = "@Model.CurrentUserFullName";

        connection.on("ReceiveMessage", function (senderFullName, message, timestamp) {
            const messageContainer = document.getElementById("chatMessages");
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("message");
            messageDiv.classList.add(senderFullName === currentUserFullName ? "sent" : "received");

            messageDiv.innerHTML = `
                <span class="message-sender">${senderFullName}</span>
                <p>${message}</p>
                <span class="message-timestamp">${timestamp}</span>
            `;
            messageContainer.appendChild(messageDiv);
            messageContainer.scrollTop = messageContainer.scrollHeight;
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("sendButton").addEventListener("click", function (event) {
            const message = document.getElementById("messageInput").value;
            const recipientId = "@Model.RecipientId";

            if (message.trim() !== "") {
                connection.invoke("SendMessage", recipientId, message).catch(function (err) {
                    return console.error(err.toString());
                });
                document.getElementById("messageInput").value = "";
            }

            event.preventDefault();
        });

        // Allow sending message with Enter key
        document.getElementById("messageInput").addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                document.getElementById("sendButton").click();
                e.preventDefault();
            }
        });
    </script>
}