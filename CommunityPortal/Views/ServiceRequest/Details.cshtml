@model CommunityPortal.Models.ServiceRequest.ServiceRequest
@using Microsoft.AspNetCore.Identity
@using CommunityPortal.Models.ServiceRequest
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Request Details";
    Layout = User.IsInRole("admin") || User.IsInRole("staff") ? "_AdminLayout" : "_HomeownersLayout";
    var currentUser = await UserManager.GetUserAsync(User);
}

<style>
    .service-request-card {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        margin-bottom: 2rem;
    }
    
    .service-request-card:hover {
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        transform: translateY(-2px);
    }
    
    .card-header {
        border-bottom: none;
        padding: 1.5rem;
    }
    
    .card-body {
        padding: 1.5rem;
    }
    
    .info-label {
        color: #6c757d;
        font-size: 0.9rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 0.5rem;
    }
    
    .info-value {
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
    }
    
    .status-badge {
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
        border-radius: 50rem;
    }
    
    .btn {
        border-radius: 50rem;
        padding: 0.5rem 1.25rem;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
    }
    
    .btn:hover {
        transform: translateY(-1px);
    }
    
    .btn i {
        font-size: 1.1rem;
    }
    
    .table {
        border-radius: 0.5rem;
        overflow: hidden;
    }
    
    .table thead th {
        background-color: #f8f9fa;
        border-bottom: none;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.5px;
    }

    .modal-content {
        border-radius: 1rem;
        border: none;
    }

    .modal-header {
        border-bottom: none;
        padding: 1.5rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        border-top: none;
        padding: 1.5rem;
    }

    .feedback-card {
        display: flex;
        align-items: flex-start;
        background: #fff;
        border-radius: 12px;
        padding: 16px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        border-left: 5px solid #ddd;
        transition: all 0.3s ease-in-out;
    }

        .feedback-card:hover {
            transform: translateY(-2px);
            box-shadow: 0px 6px 14px rgba(0, 0, 0, 0.15);
        }

    .feedback-icon {
        font-size: 32px;
        margin-right: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .feedback-content h5 {
        font-weight: bold;
        margin-bottom: 4px;
    }

    .feedback-reason {
        background: #f8f9fa;
        border-left: 4px solid #dc3545;
        padding: 10px;
        border-radius: 6px;
        font-style: italic;
    }

    .feedback-details {
        padding-left: 0;
        list-style: none;
    }

        .feedback-details li {
            margin-bottom: 4px;
        }

    .feedback-rejected {
        border-left-color: #dc3545;
    }

        .feedback-rejected .feedback-icon {
            color: #dc3545;
        }

    .feedback-cancelled {
        border-left-color: #ffc107;
    }

        .feedback-cancelled .feedback-icon {
            color: #ffc107;
        }

</style>

<div class="container">
    <div class="card service-request-card">
        <div class="card-header bg-white d-flex justify-content-between align-items-center">
            <div>
                <h3 class="mb-0 fw-bold">Service Request #@Model.Id</h3>
                <p class="text-muted mb-0 mt-1">@Model.ServiceCategory.Name</p>
            </div>
            <span class="status-badge bg-@GetStatusColor(Model.Status)">
                @Model.Status
            </span>
        </div>
        <div class="card-body">
            <div class="row g-4">
                <div class="col-12">
                    <div class="info-label">Subject</div>
                    <div class="info-value">@Model.Title</div>
                    
                    <div class="info-label">Description</div>
                    <div class="info-value">@Model.Description</div>
                </div>
                
                <div class="col-md-6">
                    <div class="info-label">House/Unit Number</div>
                    <div class="info-value">@Model.Location</div>
                </div>
                
                <div class="col-md-6">
                    <div class="info-label">Preferred Schedule</div>
                    <div class="info-value">@Model.PreferredSchedule.ToString("MMM dd, yyyy hh:mm tt")</div>
                </div>
                
                <div class="col-md-6">
                    <div class="info-label">Requested By</div>
                    <div class="info-value">@Model.Homeowner.UserName</div>
                </div>
                
                <div class="col-md-6">
                    <div class="info-label">Requested At</div>
                    <div class="info-value">@Model.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</div>
                </div>
            </div>
        </div>
    </div>

    @if (Model.StaffAssignments.Any())
    {
        <div class="card service-request-card">
            <div class="card-header bg-white">
                <h5 class="card-title fw-bold mb-0">Assigned Staff Members</h5>
            </div>
            <div class="card-body">
                <div class="accordion" id="departmentAccordion">
                    @{
                        var staffByDepartment = Model.StaffAssignments
                            .Where(sa => sa.Staff.Staff != null)
                            .GroupBy(sa => sa.Staff.Staff.Department)
                            .OrderBy(g => g.Key);
                    }
                    @foreach (var departmentGroup in staffByDepartment)
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#department-@departmentGroup.Key.Replace("&", "And").Replace("-", "").Replace(".", "").Replace(" ", "")" aria-expanded="true">
                                    @departmentGroup.Key Department
                                </button>
                            </h2>
                            <div id="department-@departmentGroup.Key.Replace("&", "And").Replace("-", "").Replace(".", "").Replace(" ", "")" class="accordion-collapse collapse show">
                                <div class="accordion-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover mb-0">
                                            <thead>
                                                <tr>
                                                    <th>Staff Member</th>
                                                    <th>Position</th>
                                                    <th>Assigned At</th>
                                                    <th>Status</th>
                                                    @if (User.IsInRole("admin"))
                                                    {
                                                        <th class="text-end">Actions</th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var assignment in departmentGroup)
                                                {
                                                    <tr>
                                                        <td>@assignment.Staff.UserName</td>
                                                        <td>@assignment.Staff.Staff.Position</td>
                                                        <td>@assignment.AssignedAt.ToString("MMM dd, yyyy hh:mm tt")</td>
                                                        <td>
                                                            @if (assignment.IsAccepted)
                                                            {
                                                                <span class="badge rounded-pill bg-success">Accepted</span>
                                                            }
                                                            else if (assignment.IsUnavailable)
                                                            {
                                                                <span class="badge rounded-pill bg-danger">Unavailable</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge rounded-pill bg-warning">Pending</span>
                                                                @if (assignment.StaffId == currentUser.Id)
                                                                {
                                                                    <div class="btn-group ms-2">
                                                                        <form asp-action="AcceptAssignment" method="post" class="d-inline me-1">
                                                                            @Html.AntiForgeryToken()
                                                                            <input type="hidden" name="requestId" value="@Model.Id" />
                                                                            <button type="submit" class="btn btn-sm btn-success">
                                                                                <i class="material-icons">check</i> Accept
                                                                            </button>
                                                                        </form>
                                                                        <form asp-action="MarkUnavailable" method="post" class="d-inline">
                                                                            @Html.AntiForgeryToken()
                                                                            <input type="hidden" name="requestId" value="@Model.Id" />
                                                                            <button type="submit" class="btn btn-sm btn-danger">
                                                                                <i class="material-icons">close</i> Unavailable
                                                                            </button>
                                                                        </form>
                                                                    </div>
                                                                }
                                                            }
                                                        </td>
                                                        @if (User.IsInRole("admin"))
                                                        {
                                                            <td class="text-end">
                                                                <button type="button" class="btn btn-sm btn-danger" 
                                                                        onclick="showRemoveStaffModal('@assignment.StaffId', '@assignment.Staff.UserName')">
                                                                    <i class="material-icons">person_remove</i>
                                                                </button>
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (Model.CompletedAt.HasValue)
    {
        <div class="card service-request-card">
            <div class="card-header bg-white">
                <h5 class="card-title fw-bold mb-0">Completion Details</h5>
            </div>
            <div class="card-body">
                <div class="info-label">Completed At</div>
                <div class="info-value mb-0">@Model.CompletedAt.Value.ToString("MMM dd, yyyy hh:mm tt")</div>
            </div>
        </div>
    }

    @if (Model.Status == ServiceRequestStatus.Rejected && !string.IsNullOrEmpty(Model.RejectionReason))
    {
        <div class="feedback-card feedback-rejected">
            <div class="feedback-icon">
                <i class="bi bi-x-circle"></i>
            </div>
            <div class="feedback-content">
                <h5>Request Rejected</h5>
                <p class="text-muted">Unfortunately, your request was rejected for the following reason:</p>
                <div class="feedback-reason">
                    <p>@Model.RejectionReason</p>
                </div>
            </div>
        </div>
    }

    @if (Model.Status == ServiceRequestStatus.Cancelled)
    {
        <div class="feedback-card feedback-cancelled">
            <div class="feedback-icon">
                <i class="bi bi-exclamation-triangle"></i>
            </div>
            <div class="feedback-content">
                <h5>Request Cancelled</h5>
                <p class="text-muted">This request has been cancelled.</p>
                <ul class="feedback-details">
                    <li><strong>Cancelled At:</strong> @Model.CancelledAt?.ToString("MMM dd, yyyy hh:mm tt")</li>
                    @if (!string.IsNullOrEmpty(Model.CancellationReason))
                    {
                        <li><strong>Reason:</strong> @Model.CancellationReason</li>
                    }
                </ul>
            </div>
        </div>
    }


    @if (Model.Feedback != null)
    {
        <div class="card feedback-card mt-4">
            <div class="card-body">
                <h5 class="card-title fw-bold mb-3">Homeowner's Feedback</h5>
                <div class="mb-3">
                    <div class="info-label">Rating</div>
                    <div class="star-rating">
                        @for (int i = 0; i < Model.Feedback.Rating; i++)
                        {
                            <i class="material-icons">star</i>
                        }
                        @for (int i = Model.Feedback.Rating; i < 5; i++)
                        {
                            <i class="material-icons">star_border</i>
                        }
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.Feedback.Comment))
                {
                    <div>
                        <div class="info-label">Comment</div>
                        <p class="mb-0">@Model.Feedback.Comment</p>
                    </div>
                }
            </div>
        </div>
    }

    @if (User.IsInRole("staff") && Model.Status != ServiceRequestStatus.Completed && Model.Status != ServiceRequestStatus.Rejected && Model.StaffAssignments.Any(sa => sa.StaffId == currentUser.Id && sa.IsAccepted))
    {
        <div class="card service-request-card mt-4">
            <div class="card-header bg-white">
                <h5 class="card-title fw-bold mb-0">Update Status</h5>
            </div>
            <div class="card-body">
                <div class="d-flex gap-2">
                    @if (Model.Status == ServiceRequestStatus.Assigned)
                    {
                        <button type="button" class="btn btn-primary flex-grow-1" onclick="showInProgressModal()">
                            <i class="material-icons">engineering</i> Mark as In Progress
                        </button>
                    }
                    @if (Model.Status == ServiceRequestStatus.InProgress)
                    {
                        <button type="button" class="btn btn-success flex-grow-1" onclick="showCompleteRequestModal()">
                            <i class="material-icons">check_circle</i> Mark as Completed
                        </button>
                        <button type="button" class="btn btn-danger flex-grow-1" onclick="showRejectRequestModal()">
                            <i class="material-icons">cancel</i> Reject Request
                        </button>
                    }
                </div>
            </div>
        </div>
    }

    @if (User.IsInRole("admin") && Model.Status != ServiceRequestStatus.Completed && Model.Status != ServiceRequestStatus.Rejected)
    {
        <div class="card service-request-card">
            <div class="card-header bg-white">
                <h5 class="card-title fw-bold mb-0">Manage Staff</h5>
            </div>
            <div class="card-body">
                <div class="accordion" id="staffAssignmentAccordion">
                    @foreach (var department in ViewBag.StaffByDepartment)
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#assign-@department.Key.Replace("&", "And").Replace("-", "").Replace(".", "").Replace(" ", "")" aria-expanded="false">
                                    @department.Key Department
                                </button>
                            </h2>
                            <div id="assign-@department.Key.Replace("&", "And").Replace("-", "").Replace(".", "").Replace(" ", "")" class="accordion-collapse collapse">
                                <div class="accordion-body">
                                    <div class="list-group">
                                        @foreach (var staff in department.Value)
                                        {
                                            <label class="list-group-item">
                                                <input type="checkbox" class="form-check-input me-2 staff-checkbox" 
                                                       value="@staff.Id" 
                                                       data-username="@staff.UserName"
                                                       data-position="@staff.Staff.Position">
                                                <div>
                                                    <div>@staff.UserName</div>
                                                    <small class="text-muted">@staff.Staff.Position</small>
                                                </div>
                                            </label>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <button type="button" class="btn btn-primary w-100 mt-3" onclick="showAssignStaffModal()">
                    <i class="material-icons">person_add</i> Assign Selected Staff
                </button>
            </div>
        </div>

        <div class="card service-request-card bg-danger bg-opacity-10">
            <div class="card-header bg-transparent">
                <h5 class="card-title fw-bold mb-0 text-danger">Danger Zone</h5>
            </div>
            <div class="card-body">
                <p class="text-danger mb-3">Once you delete a service request, there is no going back. Please be certain.</p>
                <button type="button" class="btn btn-danger w-100" onclick="showDeleteRequestModal()">
                    <i class="material-icons">delete_forever</i> Delete Service Request
                </button>
            </div>
        </div>
    }

    @if (User.IsInRole("homeowners") && Model.Status == ServiceRequestStatus.Pending)
    {
        <div class="card service-request-card mt-4">
            <div class="card-header bg-white">
                <h5 class="card-title fw-bold mb-0">Manage Request</h5>
            </div>
            <div class="card-body">
                <button type="button" class="btn btn-warning w-100" onclick="showCancelRequestModal()">
                    <i class="material-icons">cancel</i> Cancel Request
                </button>
            </div>
        </div>
    }
</div>

<!-- Assign Staff Modal -->
<div class="modal fade" id="assignStaffModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Staff Assignment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>You are about to assign the following staff members:</p>
                <ul id="selectedStaffList" class="list-group list-group-flush">
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="AssignStaff" method="post" id="assignStaffForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="requestId" value="@Model.Id" />
                    <button type="submit" class="btn btn-primary">Confirm Assignment</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Remove Staff Modal -->
<div class="modal fade" id="removeStaffModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Staff Removal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to remove <span id="removeStaffName"></span> from this service request?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="RemoveStaffAssignment" method="post" id="removeStaffForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="requestId" value="@Model.Id" />
                    <input type="hidden" name="staffId" id="removeStaffId" />
                    <button type="submit" class="btn btn-danger">Remove Staff</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Delete Request Modal -->
<div class="modal fade" id="deleteRequestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Service Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <i class="material-icons">warning</i>
                    <p class="mb-0">This action cannot be undone. This will permanently delete the service request.</p>
                </div>
                <p>Please type <strong>DELETE</strong> to confirm.</p>
                <input type="text" id="deleteConfirmation" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="Delete" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" id="deleteRequestButton" class="btn btn-danger" disabled>Delete Request</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Complete Request Modal -->
<div class="modal fade" id="completeRequestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Complete Service Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to mark this service request as completed?</p>
                <p class="text-muted">This action will notify the homeowner that the service has been completed.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="UpdateStatus" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="requestId" value="@Model.Id" />
                    <input type="hidden" name="status" value="@ServiceRequestStatus.Completed" />
                    <button type="submit" class="btn btn-success">Complete Request</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Reject Request Modal -->
<div class="modal fade" id="rejectRequestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Service Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="UpdateStatus" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <p>Please provide a reason for rejecting this service request:</p>
                    <div class="mb-3">
                        <textarea name="rejectionReason" class="form-control" rows="3" required></textarea>
                    </div>
                    <input type="hidden" name="requestId" value="@Model.Id" />
                    <input type="hidden" name="status" value="@ServiceRequestStatus.Rejected" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Reject Request</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- In Progress Modal -->
<div class="modal fade" id="inProgressModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Start Working on Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to mark this service request as in progress?</p>
                <p class="text-muted">This will indicate that you have started working on the request.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="UpdateStatus" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="requestId" value="@Model.Id" />
                    <input type="hidden" name="status" value="@ServiceRequestStatus.InProgress" />
                    <button type="submit" class="btn btn-primary">Start Working</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Cancel Request Modal -->
<div class="modal fade" id="cancelRequestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cancel Service Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="CancelRequest" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <p>Please provide a reason for cancelling this service request:</p>
                    <div class="mb-3">
                        <textarea name="cancellationReason" class="form-control" rows="3" required></textarea>
                    </div>
                    <input type="hidden" name="requestId" value="@Model.Id" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Back</button>
                    <button type="submit" class="btn btn-warning">Cancel Request</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showAssignStaffModal() {
            const selectedStaff = [];
            document.querySelectorAll('.staff-checkbox:checked').forEach(checkbox => {
                selectedStaff.push({
                    id: checkbox.value,
                    username: checkbox.dataset.username,
                    position: checkbox.dataset.position
                });
            });

            if (selectedStaff.length === 0) {
                alert('Please select at least one staff member to assign.');
                return;
            }

            const listContainer = document.getElementById('selectedStaffList');
            listContainer.innerHTML = '';
            selectedStaff.forEach(staff => {
                const li = document.createElement('li');
                li.className = 'list-group-item';
                li.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <div>${staff.username}</div>
                            <small class="text-muted">${staff.position}</small>
                        </div>
                    </div>
                `;
                listContainer.appendChild(li);

                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'staffIds';
                input.value = staff.id;
                document.getElementById('assignStaffForm').appendChild(input);
            });

            new bootstrap.Modal(document.getElementById('assignStaffModal')).show();
        }

        function showRemoveStaffModal(staffId, staffName) {
            document.getElementById('removeStaffId').value = staffId;
            document.getElementById('removeStaffName').textContent = staffName;
            new bootstrap.Modal(document.getElementById('removeStaffModal')).show();
        }

        function showDeleteRequestModal() {
            new bootstrap.Modal(document.getElementById('deleteRequestModal')).show();
        }

        function showCompleteRequestModal() {
            new bootstrap.Modal(document.getElementById('completeRequestModal')).show();
        }

        function showRejectRequestModal() {
            new bootstrap.Modal(document.getElementById('rejectRequestModal')).show();
        }

        function showInProgressModal() {
            new bootstrap.Modal(document.getElementById('inProgressModal')).show();
        }

        function showCancelRequestModal() {
            new bootstrap.Modal(document.getElementById('cancelRequestModal')).show();
        }

        // Enable/disable delete button based on confirmation text
        document.getElementById('deleteConfirmation').addEventListener('input', function(e) {
            document.getElementById('deleteRequestButton').disabled = e.target.value !== 'DELETE';
        });
    </script>
}

@functions {
    string GetStatusColor(ServiceRequestStatus status)
    {
        return status switch
        {
            ServiceRequestStatus.Pending => "warning",
            ServiceRequestStatus.Assigned => "info",
            ServiceRequestStatus.InProgress => "primary",
            ServiceRequestStatus.Completed => "success",
            ServiceRequestStatus.Rejected => "danger",
            ServiceRequestStatus.Cancelled => "secondary",
            _ => "secondary"
        };
    }
} 